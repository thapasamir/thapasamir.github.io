[ { "title": "Procrastination Excuses 101 A Look At The Most Ridiculous Excuses People Use To Justify Their Procrastination", "url": "/posts/Procrastination-Excuses-101-A-Look-at-the-Most-Ridiculous-Excuses-People-Use-to-Justify-Their-Procrastination/", "categories": "Discipline, learning", "tags": "Procrastinating, Discipline, Productivity, TimeManagement, Self Improvement, python, learning", "date": "2023-03-28 13:20:00 +0545", "snippet": "Procrastination Excuses 101: A Look at the Most Ridiculous Excuses People Use to Justify Their ProcrastinationProcrastination is a common phenomenon that affects people of all ages and backgrounds. It is the act of delaying or postponing a task, often to the point of discomfort or anxiety. It is like when you have a big pile of laundry to fold but you decide to binge-watch your favorite show instead, and then suddenly it’s 3 AM and you’re still up, surrounded by unfolded laundry, and feeling both guilty and exhausted. It’s like being a master of putting things off until later, even though you know you’ll just end up regretting it in the end. It’s the art of delay, the skill of postponement, the talent of “I’ll do it tomorrow” that never seems to come. It’s kind of funny, in a sad and relatable way.Many people struggle with procrastination and find themselves coming up with excuses to justify their behavior. In this blog post, we will look at some of the most ridiculous excuses people use to justify their procrastination, and why they don’t hold up.1) I work better under pressureAh, the classic “I work better under pressure” excuse. It’s the procrastinator’s mantra, their badge of honor, their justification for leaving everything until the last minute. But let’s be real here, folks. Is it really a valid excuse for putting things off?Sure, some people may feel like they thrive on the adrenaline rush of a looming deadline, but is it worth the stress, the anxiety, and the risk of producing subpar work? And let’s not forget about the inevitable all-nighters, the empty cups of coffee, and the feeling of dread that accompanies every ticking second on the clock.It’s like the procrastinator is a master of self-sabotage, a ninja of time-wasting, and a virtuoso of excuses. They know that they should start that project or assignment, but they just can’t seem to bring themselves to do it. So they distract themselves with Netflix, social media, or a hundred other mindless activities, all the while telling themselves that they’ll get to work “eventually.”But eventually never seems to come, does it? Instead, the deadline approaches faster than a speeding bullet, and suddenly the procrastinator is in panic mode. They’re rushing to finish the project, cutting corners, and making mistakes left and right. And all the while, they’re telling themselves that this is just the way they work best.Well, I call shenanigans on that, my friends. The truth is, procrastination is a slippery slope, a dangerous game, and a recipe for disaster. So next time you find yourself making excuses for why you haven’t started that project yet, remember that there’s no time like the present to get things done. And if you need a little extra motivation, just imagine how much more fun it will be to relax and enjoy your free time once you’ve finished all your work.2) I’m waiting for inspiration to strikeWell, well, well…look who’s waiting for their muse to show up! It’s the procrastinator, sitting there twiddling their thumbs and hoping for lightning to strike. But let me tell you, my friend, inspiration is like a cat — you can’t force it to come to you, it’ll show up when it damn well pleases.It’s like the procrastinator is trying to run a marathon without taking the first step. They keep waiting and waiting for that perfect moment to start, but guess what? It’s not coming! Meanwhile, time is ticking away, deadlines are looming, and the pressure is mounting. And all they have to show for their efforts is a blank page or a blank canvas.So, what’s the solution? It’s simple — just start! Don’t wait for some divine intervention or a sudden burst of creativity. Just put pen to paper, brush to canvas, fingers to keyboard, and get going. You might surprise yourself with what you come up with.And let’s be real here, folks. Inspiration is like a unicorn — it’s magical and elusive, and it’s not something you can count on. Sometimes, the best ideas come from just getting started and building on what you have. And sure, maybe you won’t come up with the next Mona Lisa or a Pulitzer Prize-winning novel, but you’ll have something to work with. And that’s a hell of a lot better than waiting around for inspiration to show up.So next time you find yourself waiting for that bolt of lightning to strike, remember that the only way to get things done is to start. And who knows, maybe inspiration will show up eventually — but don’t count on it. In the meantime, you’ll have a head start on your work, and you won’t be scrambling to meet that deadline. And isn’t that a much better feeling than waiting around for a muse that might never come?3) I don’t have enough timeAh, the old “I don’t have enough time” excuse — a classic way to justify procrastination! But let’s be honest, we all know it’s not true. I mean, how many hours do we spend scrolling mindlessly through social media or binge-watching our favorite shows? If we can find time for that, we can find time for anything!In fact, studies have shown that the average person spends around two hours a day on social media alone — that’s 14 hours a week! And don’t even get me started on the hours wasted watching cat videos on YouTube.So, it’s time to stop using the “not enough time” excuse and start prioritizing our tasks. It’s all about making the task a priority — just like we prioritize our Netflix binges or happy hour with friends. And let’s face it, if we can make time for happy hour, we can make time for anything!But in all seriousness, it’s important to recognize that time management is key to overcoming procrastination. By setting realistic goals and breaking tasks down into manageable steps, we can avoid feeling overwhelmed and actually make progress.And hey, if all else fails, just remember this classic joke: “Why do today what you can put off until tomorrow?” — said no successful person ever!4) I’ll do it tomorrowAh, the infamous “I’ll do it tomorrow” excuse — the siren song of procrastinators everywhere! But let’s face it, we all know that tomorrow never really comes, does it? It just becomes another today, and before you know it, you’re drowning in a sea of unfinished tasks and unfulfilled goals.But fear not, my fellow procrastinators! The solution is simple — start today, and build momentum for tomorrow! It’s like exercising — the first step is always the hardest, but once you get going, it becomes easier and easier to keep going.Think of it this way — every task you complete today is one less thing you have to worry about tomorrow. And who doesn’t love the feeling of crossing things off their to-do list? It’s like a little victory dance with each completed task.Plus, starting early gives you more time to take breaks and recharge your batteries. You’ll feel less stressed and more energized, which will help you tackle even more tasks and achieve your goals.So, let’s all make a pledge to start today and build momentum for tomorrow. Who knows, maybe we’ll even become the type of people who finish things early and have extra time to relax and enjoy life! As the old saying goes, “why put off until tomorrow what you can do today? Unless it’s eat a cake — then, by all means, put that off until tomorrow.”5) I need to do some research firstThe perfect way to delay starting a task without feeling guilty! But let’s be real, sometimes we use this excuse to avoid doing the actual work, and we end up drowning in a sea of information overload.Sure, research is important — it’s what separates the amateurs from the professionals. But there’s a fine line between doing enough research and getting stuck in an endless cycle of analysis paralysis.Let me tell you a story about a guy named Steve. Steve wanted to write a blog post about the benefits of procrastination (ironic, I know). So, he spent hours researching the topic, reading articles, watching videos, and taking notes. But by the time he was ready to start writing, he was so overwhelmed with information that he didn’t know where to begin.Days turned into weeks, and weeks turned into months. Steve’s blog post was still just a blank page. And all because he was too afraid to take the first step.So, don’t be like Steve! Start with what you know, and build on it as you go. Sure, do your research — but don’t let it become an excuse to avoid doing the work. Just like in life, sometimes you need to take a leap of faith and trust that you’ll figure things out as you go along.And hey, if you’re still feeling overwhelmed, just remember this classic joke: “How many procrastinators does it take to change a light bulb? One, but he’ll wait until the last minute to do it.” But let’s not wait until the last minute — let’s start today and make things happen!ConclusionProcrastination is a sneaky devil that likes to make us feel like we don’t have the time, motivation, or knowledge to get things done. But these excuses don’t hold up under scrutiny. To overcome procrastination, we need to recognize when we’re using these excuses as a crutch and take action to break the cycle. Starting early, building momentum, and not letting fear or perfectionism hold us back is key. The first step is always the hardest, but once we start, it becomes easier and easier to keep going. So let’s kick our procrastination habits to the curb, and start taking action towards our goals and dreams. In the end, it’s not about the excuses we make, but the actions we take that define us.Heard this from a friend:“Procrastination is like masturbation. You might feel really great at the moment, but its only later you realise that you’ve just fu*ked yourself.”" }, { "title": "How To Choose Your First Programming Language And Why", "url": "/posts/How-to-choose-your-first-programming-language-and-why/", "categories": "programming, python, learning, coding", "tags": "programming, python, learning", "date": "2023-01-02 21:05:00 +0545", "snippet": "How to choose your first programming language and why ?A programming language is not only a programming language. Its a philosophy about thoughts and ideas; and its a community of people who believe in those thoughts and ideas. Sure as someone who is just starting out, it may be a good idea to learn the most popular programming language. But once you are fairly knowledgeable in the language, its a good idea to pick something else. Before picking up a programming language to learn get a feel of the people who work in the language. The quirks of the programming language will be manifested by how the people behave.Okay ! Firstly let,s start with what is programming language ?A programming language is a set of rules and syntax for writing computer programs. It is a way for humans to communicate instructions to a computer in a way that the computer can understand and execute. There are many different programming languages, each with their own set of rules and syntax. Some examples of programming languages include C, C++, Java, Python, and Lisp. Each programming language has its own unique features and is used for different purposes. For example, C and C++ are high-performance languages that are often used for operating systems and other low-level applications, while Java and Python are high-level languages that are easier for humans to read and write, and are often used for web development and data analysis.What is Programming Paradigm ?A programming paradigm is a style or approach to organizing and writing code. It is a way of thinking about the structure and behavior of a computer program. Different programming paradigms have different characteristics and trade-offs, and can be more or less suited to different types of problems.Some common programming paradigms include imperative programming, object-oriented programming, functional programming, logic programming, and procedural programming. Each paradigm has its own set of concepts, techniques, and approaches to organizing code, and different programming languages may support one or more paradigms.By using a particular programming paradigm, developers can take advantage of its specific features and benefits to solve problems in an efficient and effective way. For example, object-oriented programming is often used for building complex software systems because it allows developers to model real-world concepts and relationships in a natural way, while functional programming is well-suited to concurrent and parallel programming because it avoids changing state.Some of the most popular paradigms include: Imperative programming: This paradigm focuses on describing how a program should operate by specifying a sequence of actions for the computer to perform. It is based on the idea of mutable state and includes languages such as C, C++, and Java. Object-oriented programming: This paradigm organizes code into “objects” that represent real-world entities and the actions that can be performed on them. It is based on the idea of encapsulation and includes languages such as Java, Python, and C#. Functional programming: This paradigm treats computation as the evaluation of mathematical functions and avoids changing state. It is based on the idea of immutability and includes languages such as Lisp, Haskell, and ML. Procedural programming: This paradigm organizes code into procedures, or small subroutines that perform specific tasks. It is based on the idea of modularity and includes languages such as C and Pascal.I know you are getting bored now lets talk about which programming language should your learn ?Deciding which programming language to learn first can be a challenging task, as there are many factors to consider and many different languages to choose from. Here are a few things to consider when deciding which programming language to learn first: Your goals: What do you want to achieve by learning to program? Different languages are better suited to different types of tasks, so consider what you want to build or create. For example, if you want to build web applications, you might consider learning a language like JavaScript or Python. If you want to build mobile apps, you might consider learning a language like Swift or Java. If you want to build games, you might consider learning a language like C++ or C#. Your background: Do you have any previous experience with programming or computer science? If you are new to programming, you might want to start with a language that is easy to learn and has a large community of users, such as Python or Java. These languages have simple syntax and a lot of resources available for beginners. If you have some experience with programming or a strong math background, you might be able to start with a more advanced language like C++ or Haskell. The job market: Are there certain programming languages that are in high demand in the job market? If you are learning to program as a way to advance your career, it might be helpful to learn a language that is in high demand by employers. Some languages that are currently in high demand include Python, JavaScript, and Go. It’s also a good idea to consider the specific industries or companies that you are interested in working for, as they may have a preference for certain languages. Your interests: It’s important to choose a programming language that you enjoy working with, as learning to program can be a long and challenging process. Consider your personal interests and what type of projects you might enjoy building. For example, if you are interested in data analysis and machine learning, you might consider learning a language like Python or R. If you are interested in building interactive websites, you might consider learning a language like JavaScript. Your learning style: Different programming languages have different learning curves and may require different amounts of time and effort to master. Consider your learning style and how much time and effort you are willing to put into learning a new language. Some languages, like Python, are known for being easy to learn, while others, like C++, can be more challenging.Ultimately, the best programming language to learn first will depend on your individual goals, background, and interests. It might be helpful to try out a few different languages to see which one you enjoy the most and feel the most comfortable with. It’s also important to keep in mind that it is not necessary to learn just one language, and many programmers are proficient in multiple languages.Still confused which programming language to learn ?If you are still confused which programming language you should learn then.Here are a few examples of programming languages and their scope, or the types of tasks that they are commonly used for: C: C is a low-level programming language that is often used for operating systems, compilers, and other systems software. It is known for its efficiency and performance, but can be more difficult to learn than higher-level languages. C++: C++ is an extension of C that adds support for object-oriented programming. It is often used for building large-scale applications, such as games, web browsers, and operating systems. Java: Java is a popular programming language that is widely used for building enterprise applications, such as web servers, business applications, and Android mobile apps. It is known for its portability, security, and scalability. Python: Python is a high-level, dynamically-typed programming language that is widely used for web development, scientific computing, data analysis, and artificial intelligence. It is known for its simplicity, readability, and large community of users. JavaScript: JavaScript is a popular programming language that is widely used for building interactive web applications. It is often used in conjunction with HTML and CSS to create dynamic and interactive websites. Go: Go, also known as Golang, is a programming language developed by Google that is designed for building scalable and efficient systems. It is often used for building cloud services, microservices, and distributed systems. Swift: Swift is a programming language developed by Apple for building iOS, macOS, watchOS, and tvOS applications. It is known for its safety, performance, and concise syntax.where can i learn programming ?There are many places where you can learn programming, including: Online tutorials and courses: There are many websites and platforms that offer programming tutorials and courses, such as Codecademy, Coursera, and edX. These resources often provide interactive exercises and projects to help you practice and apply your skills. Books and textbooks: There are many books and textbooks available on programming, ranging from beginner to advanced levels. Reading a book or textbook can be a good way to learn programming at your own pace and in a structured way. YouTube: There are many programming-related channels on YouTube that offer tutorials, talks, and other resources. Watching videos can be a good way to learn programming concepts and see them demonstrated in action. Open source projects: Contributing to open source projects can be a good way to learn programming by working on real-world projects and getting feedback from experienced developers. You can find open source projects to contribute to on websites like GitHub.No matter what method you choose, it’s important to be persistent and consistent in your learning. Programming can be a challenging subject, and it takes time and practice to become proficient.Challanges while learning Programming :Learning programming can be a challenging and rewarding experience, but there are a few common challenges that many people encounter along the way: Syntax errors: One of the most common challenges when learning programming is dealing with syntax errors, which are mistakes in the way that you write your code. Syntax errors can be frustrating to deal with, but they are a normal part of the learning process and will become easier to spot and fix with practice. Syntax errors are often caused by forgetting to close a quotation mark or parenthesis, misspelling a keyword, or using the wrong case for a variable name. Debugging: Debugging is the process of identifying and fixing errors in your code. It can be challenging to figure out why your code is not working as expected, especially when you are first starting out. Debugging requires a combination of logical thinking and attention to detail, as you need to understand how your code is supposed to work and identify where the problems are. Understanding concepts: Programming involves learning a lot of new concepts, such as variables, loops, and data structures. It can be challenging to understand and remember all of these concepts, especially when you are first starting out. It’s important to take the time to learn and understand the basics before moving on to more advanced topics. Staying motivated: Learning programming can be a long and sometimes frustrating process, and it’s important to stay motivated and keep making progress. It can be helpful to set small goals for yourself and celebrate your achievements along the way. It’s also a good idea to find a supportive community of other programmers to share your experiences and challenges with. Finding resources: There are many resources available for learning programming, but it can be challenging to find the ones that are most helpful for your needs. There are many online tutorials, courses, and books available, but not all of them are of equal quality. It’s a good idea to try out a few different resources and see what works best for you. Time management: Programming requires a lot of time and effort to learn and master, and it can be challenging to find the time to practice and make progress. It’s important to be realistic about how much time you can devote to learning programming and to set aside dedicated time for practice and learning. Balancing theory and practice: Programming involves both learning the theory behind how it works and applying that knowledge through practice. It can be challenging to find the right balance between the two, but it’s important to spend enough time on both to become proficient.Overall, the key to overcoming these challenges is to be persistent and consistent in your learning. Programming can be a challenging subject, but with practice and perseverance, you can become a proficient programmer. It’s also important to seek help when you need it and not be afraid to ask questions. There are many resources available, such as online forums, mentors, and community groups, that can provide guidance and support as you learn to program.Bonus :Funny programming Languages:Here are a few examples of humorous programming languages, along with a short example program in each language: BrainFuck: BrainFuck is an esoteric programming language that was created in 1993 as a joke. It is known for its extremely minimalistic syntax, which consists of only eight commands.Here is an example program in BrainFuck that prints “Hello, World!” to the console:++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++. — — — . — — — — .&gt;+.&gt;. Moo is an esoteric programming language that was created as a joke. It is based on the concept of a “mooing” interpreter, which “interprets” programs by mooing the output. Here is an example program in Moo that prints “Hello, World!” to the console:MOO “Hello, World!” Bhailang is dynamically typed toy programming language, based on an inside joke, written in Typescript. Example of bhailang jab tak bhai (b &lt; 5) { bol bhai b; agar bhai (b == a) { bol bhai \"b is equal to a\"; } nahi to bhai (b == 0) { bol bhai \"b is equal to zero\"; } b += 1; } bye bhai Thanks for reading my blog " }, { "title": "Contex Manger In Python", "url": "/posts/contex-manger-in-python/", "categories": "programming, python", "tags": "programming, python, contex manager", "date": "2022-08-14 05:17:00 +0545", "snippet": "What is a context manager in Python and how to create your own context manager?If you don,t know what is context manager the don’t worry you will know it clearly after you finish this articleThe main principle behind writing a context manager is that you’re writing code that’s meant to surround a block of statements as defined by the use of the with a statement. Context managers allow you to allocate and release resources precisely when you want to. The most widely used example of context managers is the with statement. Suppose you have two related operations which you’d like to execute as a pair, with a block of code in between. Context managers allow you to do specifically that. For example: with open('cornsite.txt', 'wt') as fk: fk.write('cornhub.com')The above code opens the file called “cornsite.txt” and writes some data and closes it. If an error occurs while writing the data to the file, it tries to close it. It will look something like this if we don,t use context manager: file = open('cornsite.txt', 'wt') try: file.write('cornhub.com!') finally: file.close()The main advantage of using a with statement is that it makes sure our file is closed without paying attention to how the nested block exits.Now let’s see how can we create our own context managerAccomplishing context manager as through class :To create a context manager with the help of class we have to use __enter__ and __exit__ dunder method. The enter() returns the resource that needs to be managed and the exit() does not return anything but performs the cleanup operations. let,s make our own file opening context manager :class Banana(object): def __init__(self, file_name, method): self.file_object = open(file_name, method) def __enter__(self): return self.file_object def __exit__(self, type, value, traceback): self.file_object.close()Just by defining __enter__ and __exit__ methods we can use our new class Banana in a with statementwith Banana('message.txt', 'w') as fk: fk.write('Send Dudes!😇')Congratulation you just created your first context managerLet’s see what is happening underneath the hood: The with statement stores the __exit__ method of the Banana class. It calls the __enter__ method of the Banana class. The __enter__ method opens the file and returns it. The opened file handle is passed to fk. We write to the file using .write(). The with statement calls the stored __exit__ method. The __exit__ method closes the file.Now Accomplishing context manager as through GeneratorCreating context managers the traditional way, by writing a class with __enter__ and __exit__ methods are not difficult. But sometimes it is more overhead than you need just to manage a trivial bit of context. For that Python has a contextlib module for this very purpose. Instead of a class, we can implement a Context Manager using a generator function. Let’s see a basic, useless(as you) example:from contextlib import contextmanager @contextmanager def banana(name): f = open(name, 'w') try: yield f finally: f.close()Now let’s use thiswith banana('potato.txt') as f: f.write('sexy kto mah 123!')Booom its working lets discuss a little how it’s working Python encounters the yield keyword. Due to this, it creates a generator instead of a normal function. Due to the decoration, contextmanager is called with the function name (banana) as its argument. The contextmanager decorator returns the generator wrapped by the GeneratorContextManager object. The GeneratorContextManager is assigned to the banana function. Therefore, when we later call the banana function, we are actually calling the GeneratorContextManager object.I know this blog is not so good and big but I knowAnd thanks for reading my blog and please give your feedback in the comment section.Bye see ya in new Blog :)" }, { "title": "My First Blog", "url": "/posts/my-first-blog/", "categories": "Blogging, Test", "tags": "programming", "date": "2021-01-04 05:17:00 +0545", "snippet": "I am just checking how does this work XD" } ]
